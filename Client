import java.io.*;
import java.net.InetAddress;
import java.net.Socket;

public class client {
    public static void main(String[] args) {

        Socket sock = null;              // client's socket
        InetAddress addr;         // addr of server (local host for now)
        DataOutputStream sockStrm = null;// stream used to write to socket
        BufferedReader stdin = null;     // buffered version of instrm
        String cmd = null;               // User input
        String[] splitCmd;        // protocol
        BufferedReader serverInput = null;        // read server response
        PrintWriter out = null;

        System.out.println("Client starting...");

        try {
            addr = InetAddress.getByName("owl.cs.umanitoba.ca");
            sock = new Socket(addr, 13346);
            System.out.println("Socket created in the first try catch");
        } catch (IOException e) {
            System.out.println("Socket creation failed");
            System.exit(1);
        }

        // set up terminal input and socket output streams
        try {
            stdin = new BufferedReader(new InputStreamReader(System.in));
            sockStrm = new DataOutputStream(sock.getOutputStream());
            serverInput = new BufferedReader(new InputStreamReader(sock.getInputStream()));
            out = new PrintWriter(sock.getOutputStream(), true);
        } catch (Exception e) {
            System.out.println("Socket output stream failed.");
            System.exit(1);
        }

        do {
            // read and send string over the socket until "E" is entered
            try {
                cmd = stdin.readLine();
                System.out.println("Command read in the client");
                splitCmd = cmd.split("[<,>]");     // remove special characters and split string
                //System.out.println("Printing splitCMd " + splitCmd[0] + " second element " + splitCmd[1]);
                switch (splitCmd[0]) {
                    case "C":
                        out.println("C," + splitCmd[1]);
                        System.out.println("Server's response is: " + serverInput.readLine());
                        break;
                    case "R":
                        out.println("R," + splitCmd[1]);
                        System.out.println("Server's response is: " + serverInput.readLine());
                        break;
                    case "D":
                        out.println("D," + splitCmd[1] + "," + splitCmd[2]);
                        System.out.println("Server's response is: " + serverInput.readLine());
                        break;
                    case "W":
                        out.println("W," + splitCmd[1] + "," + splitCmd[2]);
                        System.out.println("Server's response is: " + serverInput.readLine());
                        break;
                    case "E":
                        System.out.println("Exiting the client"); // exit client
                        out.println("E");
                        System.out.println("Server's response is: " + serverInput.readLine());
                        break;
                    default:
                        System.out.println("Unknown command.");
                }
            } catch (Exception e) {
                System.out.println("Terminal read or socket output failed");
                System.exit(1);
            }

        } while (!cmd.equals("E"));

        // close streams and socket
        try {
            serverInput.close();
            stdin.close();
            sockStrm.close();
            sock.close();
        } catch (Exception e) {
            System.out.println("Client couldn't close socket.");
            System.exit(1);
        }

        System.out.println("Client finished");
    } // main method
} // client class
